Problem Set 1: Personalized Table Creation and Relationship Setup

1. DEFINE YOUR ENTITIES:
   •Owner Table:
    id INT(Primary Key)
    owner_ name VARCHAR(50)
    owner_id INT
    

   •Brand Table:
     Id INT (Primary Key)
      Phone_brand VARCHAR2(50)
      Owner_id INT (Foreign Key referencing Owner.Owner_id)

2. Enforce a Unique Constraint
   - Unique constraints are applied on AGE in OWNER  and MODEL in BRAND

3. EXAMPLE OUTPUT 
  
CREATE TABLE Tin_OWNER( 
id NUMBER PRIMARY KEY, 
owner_name VARCHAR2(100), 
owner_id NUMBER, 
age NUMBER)

INSERT INTO Tin_Owner(id, owner_name, owner_id,age)  
VALUES(1, 'Carl',097792416,17)

INSERT INTO Tin_Owner(id, owner_name, owner_id,age)  
VALUES(2, 'Marie',096892417,17)

INSERT INTO Tin_Owner(id, owner_name, owner_id,age)  
VALUES(3, 'Kayla',099692426,17)

CREATE TABLE Tin_phone( 
id NUMBER, 
phone_brand VARCHAR2(100), 
model VARCHAR2(50), 
owner_id NUMBER, 
FOREIGN KEY (id) REFERENCES Tin_owner(id) 

   INSERT INTO Tin_brand(id, phone_brand,model, owner_id)
VALUES (1, 'Vivo', 'VivoY18' 097792416);

INSERT INTO Tin_brand(id, phone_brand,model, owner_id)
VALUES (3, 'Oppo', 'Y16' 096892417);
       
   

  The foreign key relationship between the Tin_OWNER and Tin_BRAND tables is essential for maintaining data integrity. The owner_id in Tin_BRAND ensures that each phone brand record is linked to a valid owner in Tin_OWNER, preventing orphaned brand entries. This setup makes it easy to track which owner owns which phone brand, creating a clear and accurate relationship between the two entities.


4. Reflection
   Foreign keys ensure that each owner of the phone  is associated with an existing owner_id in owner, while unique constraints on 'Age` and `Model` prevent duplicate records, maintaining data accuracy. This setup ensures each owner of phone and owner_id has unique entries, making it more easy to track the owner of that phone.

Problem Set 2: Custom Modifications Using ALTER Command

1. Add a New Column to Each Table:
   - In Owner add `password` to represent that phone is to the owner.
   - In brand, add `year_buy` it represent when did they buy that phone .

2. Apply a Unique Constraint:
   - We’ll make `password` unique in owner to reflect that each phone has a unique password.


ALTER TABLE Tin_OWNER
ADD password INTEGER UNIQUE;

ALTER TABLE Tin_phone
ADD year_buy INTEGER;
   
   


3. Reflection:
The unique constraint on `password` ensures that each of thier phone  has a unique password, to know that this phone is in the owner . This adds depth to the data, helping the owner to make it easy to track their phones.

problem set 3.


1.create and Test duplicates

CREATE TABLE Tin_OWNER( 
id NUMBER PRIMARY KEY, 
owner_name VARCHAR2(100), 
owner_id NUMBER, 
age NUMBER)

2.example error testing script
insert some sample record with unique user_name and title values.

INSERT INTO Tin_Owner(id, owner_name, owner_id,age)  
VALUES(1, 'Carl',097792416,17)

3. observed and documment errors
ORA-00001: unique constraint (SQL_WPEFBCMSXCDDBKVGWYPCIPKUD.SYS_C00172999095)violated ORA-06512: at "SYS.DBMS_SQL", line 1721

4. Reflection:
The data based will shown an error,(e.g.,'ORA-00001: unique constraint')
indicate that the record you enter is dupilicated.unique constraint 
prevent data entry that is duplicate.

problem set 4.

1.Delete record based on the condition.
DELETE FROM Tin_Owner WHERE id = 1 ;

this command delete record where id is 1.

2.Drop Table with Cascade Constraints
DROP TABLE Tin_phone CASCADE CONSTRAINTS;

This command will delete all records and the table in TIN_PHONE.

Reflection:
CASCADE CONSTRAINTS ensures that the record in your table is deleted.
its important to delete ensuring that your data remains consistent and accurate.

problem set 5.
1.Define youre unique scenario.

TIN_OWNER and TIN_PHONE the relationship between this table is that
one owner can have multiple phone, but each phone belongs to only one owner.

2.Apply unique constraints.
OWNER TABLE: ensure that each of the owner has unique id and name 

PHONE TABLE : Ensures that one phone has unique owner.

CREATE TABLE Tin_OWNER( 
id NUMBER PRIMARY KEY, 
owner_name VARCHAR2(100), 
owner_id NUMBER, 
age NUMBER)

CREATE TABLE Tin_phone( 
id NUMBER, 
phone_brand VARCHAR2(100), 
model VARCHAR2(50), 
owner_id NUMBER, 
FOREIGN KEY (id) REFERENCES Tin_owner(id) 
).

3.Alter the sturcture.

ALTER TABLE Tin_Owner
ADD password INTEGER UNIQUE ;

4. Reflection
Unique constraints on age in TIN_OWNER and model in TIN BRAND prevent duplicate entries
ensures that each owner has unique phone.the foreign key enable efficient retrival.ex
you can quickly find the owner of phone by its owner_id.

